{"noir_version":"0.27.0+606ff4448571b0cfe4b92420c766c4239a4b23a0","hash":7496136830976835521,"abi":{"parameters":[{"name":"range","type":{"kind":"array","length":2,"type":{"kind":"integer","sign":"unsigned","width":64}},"visibility":"public"},{"name":"operator","type":{"kind":"field"},"visibility":"public"},{"name":"hashed_message","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"signature","type":{"kind":"array","length":64,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"publicKey","type":{"kind":"struct","path":"ecrecover::PublicKey","fields":[{"name":"pub_x","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"pub_y","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}}]},"visibility":"private"},{"name":"guess","type":{"kind":"struct","path":"coordinates::Coordinate","fields":[{"name":"latitude","type":{"kind":"struct","path":"coordinates::Latitude","fields":[{"name":"negative","type":{"kind":"boolean"}},{"name":"integral","type":{"kind":"integer","sign":"signed","width":32}},{"name":"fractional","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"longitude","type":{"kind":"struct","path":"coordinates::Longitude","fields":[{"name":"negative","type":{"kind":"boolean"}},{"name":"integral","type":{"kind":"integer","sign":"signed","width":32}},{"name":"fractional","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},"visibility":"private"},{"name":"actual","type":{"kind":"struct","path":"coordinates::Coordinate","fields":[{"name":"latitude","type":{"kind":"struct","path":"coordinates::Latitude","fields":[{"name":"negative","type":{"kind":"boolean"}},{"name":"integral","type":{"kind":"integer","sign":"signed","width":32}},{"name":"fractional","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"longitude","type":{"kind":"struct","path":"coordinates::Longitude","fields":[{"name":"negative","type":{"kind":"boolean"}},{"name":"integral","type":{"kind":"integer","sign":"signed","width":32}},{"name":"fractional","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},"visibility":"private"}],"param_witnesses":{"actual":[{"start":169,"end":175}],"guess":[{"start":163,"end":169}],"hashed_message":[{"start":3,"end":35}],"operator":[{"start":2,"end":3}],"publicKey":[{"start":99,"end":163}],"range":[{"start":0,"end":2}],"signature":[{"start":35,"end":99}]},"return_type":null,"return_witnesses":[]},"bytecode":"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","debug_symbols":"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","file_map":{"47":{"source":"use dep::std;\n\nstruct PublicKey {\n    pub_x: [u8; 32],\n    pub_y: [u8; 32],\n}\n\nimpl PublicKey {\n    fn from_xy(pub_x: [u8; 32], pub_y: [u8; 32]) -> PublicKey {\n        PublicKey { pub_x, pub_y }\n    }\n\n    fn from_unified(pub_key: [u8; 64]) -> PublicKey {\n        let (pub_x, pub_y) = split_u8_64_unconstrained(pub_key);\n\n        PublicKey { pub_x, pub_y }\n    }\n\n    pub fn to_eth_address(self) -> Field {\n        let pub_key = u8_32_to_u8_64_unconstrained(self.pub_x, self.pub_y);\n        let hashed_pub_key = std::hash::keccak256(pub_key, 64);\n\n        let mut addr: Field = 0;\n        for i in 0..20 {\n            addr = (addr * 256) + hashed_pub_key[i + 12] as Field;\n        }\n\n        addr\n    }\n\n    fn ecrecover(self, signature: [u8; 64], hashed_message: [u8; 32]) -> Field {\n        let valid_signature = std::ecdsa_secp256k1::verify_signature(self.pub_x, self.pub_y, signature, hashed_message);\n        assert(valid_signature, \"Invalid signature\");\n        let addr = self.to_eth_address();\n        addr\n    }\n}\n\nunconstrained pub fn split_u8_64_unconstrained(arr: [u8; 64]) -> ([u8; 32], [u8; 32]) {\n    let mut arr_a: [u8; 32] = [0; 32];\n    let mut arr_b: [u8; 32] = [0; 32];\n\n    for i in 0..32 {\n        arr_a[i] = arr[i];\n        arr_b[i] = arr[i + 32];\n    }\n\n    (arr_a, arr_b)\n}\n\nunconstrained pub fn u8_32_to_u8_64_unconstrained(arr_a: [u8; 32], arr_b: [u8; 32]) -> [u8; 64] {\n    let mut combined: [u8; 64] = [0; 64];\n\n    for i in 0..32 {\n        combined[i] = arr_a[i];\n    }\n    for i in 0..32 {\n        combined[i + 32] = arr_b[i];\n    }\n\n    combined\n}\n","path":"/Users/envoy1084/Projects/Important/zk-guesser/packages/circuits/src/ecrecover.nr"},"49":{"source":"use dep::std;\nmod ecrecover;\nmod coordinates;\n\n#[export]\nunconstrained fn get_distance(c1: coordinates::Coordinate, c2: coordinates::Coordinate) -> u64 {\n    coordinates::distance(c1, c2)\n}\n\nfn main(\n    range: pub [u64; 2],\n    operator: pub Field,\n    hashed_message: pub [u8; 32],\n    signature: [u8; 64],\n    publicKey: ecrecover::PublicKey,\n    guess: coordinates::Coordinate,\n    actual: coordinates::Coordinate\n) {\n    let recovered = publicKey.ecrecover(signature, hashed_message);\n    assert(recovered == operator, \"ZKGuesser: Invalid Signature\");\n\n    let distance = get_distance(guess, actual);\n    assert(distance >= range[0], \"ZKGuesser: Distance out of range\");\n    assert(distance <= range[1], \"ZKGuesser: Distance out of range\");\n}\n\n#[test]\nfn test_guess() {\n    let range = [0, 1000];\n    let c1 = coordinates::Coordinate {\n        latitude: coordinates::Latitude { negative: false, integral: 52, fractional: 52 },\n        longitude: coordinates::Longitude { negative: false, integral: 13, fractional: 4050 }\n    };\n\n    let c2 = coordinates::Coordinate {\n        latitude: coordinates::Latitude { negative: false, integral: 51, fractional: 5047 },\n        longitude: coordinates::Longitude { negative: true, integral: 0, fractional: 1278 }\n    };\n\n    let hashed_message = [\n        106, 66, 40, 170, 243, 63, 60, 17,\n        56, 150, 90, 247, 119, 140, 24, 98,\n        183, 76, 104, 12, 120, 164, 239, 194,\n        63, 35, 27, 195, 193, 110, 80, 6\n    ];\n\n    let signature = [\n        238, 40, 53, 223, 85, 186, 149, 138, 146, 3, 11,\n        177, 242, 12, 241, 111, 50, 97, 95, 64, 246, 175,\n        94, 161, 189, 107, 13, 229, 61, 221, 34, 54, 51,\n        178, 47, 31, 48, 45, 218, 68, 130, 26, 16, 205,\n        224, 81, 82, 188, 218, 175, 255, 197, 188, 225, 228,\n        201, 184, 92, 195, 71, 113, 219, 141, 107\n    ];\n    let publicKey = ecrecover::PublicKey {\n        pub_x: [\n            224, 117, 65, 44, 181, 126, 126, 206,\n            100, 136, 127, 140, 111, 57, 8, 6,\n            16, 68, 199, 139, 215, 145, 174, 95,\n            86, 106, 121, 40, 250, 45, 18, 86\n        ],\n        pub_y: [\n            93, 241, 76, 152, 89, 186, 145, 163,\n            91, 68, 228, 13, 213, 15, 15, 133,\n            185, 64, 236, 186, 59, 140, 113, 57,\n            87, 136, 133, 137, 109, 152, 133, 57\n        ]\n    };\n\n    main(\n        range,\n        0x0009D5d42d946c42E8138D7EfE483118dbCA414B,\n        hashed_message,\n        signature,\n        publicKey,\n        c1,\n        c2\n    );\n}\n\n#[test]\nfn test_key_to_address() {\n    let pub_key_x = [\n        57, 75, 55, 39, 97, 142, 247, 86,\n        26, 215, 46, 10, 196, 46, 217, 135,\n        26, 114, 151, 135, 65, 26, 58, 81,\n        34, 20, 128, 84, 89, 69, 113, 80\n    ];\n    let pub_key_y = [\n        194, 204, 236, 13, 142, 215, 50,\n        113, 123, 172, 198, 209, 211, 249,\n        162, 5, 109, 90, 233, 85, 81,\n        127, 75, 191, 251, 191, 103, 225,\n        206, 206, 211, 50\n    ];\n\n    let key = ecrecover::PublicKey { pub_x: pub_key_x, pub_y: pub_key_y };\n    let addr = key.to_eth_address();\n    assert(addr == 0x73979880be5A498fC205D4Ad7EB517d9B2e03c9d);\n}\n\n#[test]\nfn test_verifySig() {\n    let pub_key_x = [\n        57, 75, 55, 39, 97, 142, 247, 86,\n        26, 215, 46, 10, 196, 46, 217, 135,\n        26, 114, 151, 135, 65, 26, 58, 81,\n        34, 20, 128, 84, 89, 69, 113, 80\n    ];\n    let pub_key_y = [\n        194, 204, 236, 13, 142, 215, 50,\n        113, 123, 172, 198, 209, 211, 249,\n        162, 5, 109, 90, 233, 85, 81,\n        127, 75, 191, 251, 191, 103, 225,\n        206, 206, 211, 50\n    ];\n\n    let signature = [\n        191, 21, 84, 47, 7, 134, 56, 201, 195, 27, 124,\n        255, 117, 104, 176, 211, 125, 65, 43, 101, 47, 5,\n        74, 223, 246, 18, 164, 19, 22, 15, 148, 97, 17,\n        156, 245, 230, 49, 207, 16, 142, 6, 254, 75, 255,\n        230, 54, 52, 161, 84, 138, 253, 252, 75, 146, 30,\n        193, 63, 156, 134, 225, 7, 52, 210, 76\n    ];\n    let hashed_message = [\n        29, 189, 253, 193, 67, 240, 35, 230,\n        34, 55, 70, 114, 37, 234, 124, 228,\n        108, 45, 102, 115, 115, 181, 253, 190,\n        165, 57, 67, 99, 118, 95, 55, 104\n    ];\n\n    let key = ecrecover::PublicKey { pub_x: pub_key_x, pub_y: pub_key_y };\n    assert(key.ecrecover(signature, hashed_message) == 0x73979880be5A498fC205D4Ad7EB517d9B2e03c9d);\n}\n","path":"/Users/envoy1084/Projects/Important/zk-guesser/packages/circuits/src/main.nr"}},"names":["main"]}